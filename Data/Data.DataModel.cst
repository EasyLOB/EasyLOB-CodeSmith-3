<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Application" Type="String" Category="Application" Description="Application" %>
<%@ Property Name="Namespace" Type="String" Category="Application" Description="Namespace [using Application.*]" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Collections" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%

// Associations (FK) => Relationships FK
// Collections (PK)  => Relationships PK

if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}

string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

// LookupProperty
//   2nd property, or 1st if there is no 2nd property
//   1st string property

string lookupProperty = PropertyName((SourceTable.Columns.Count >= 2) ? SourceTable.Columns[1].Name : SourceTable.Columns[0].Name);
foreach (ColumnSchema column in SourceTable.Columns) {
    // First String non-primary-key column
    if (!column.IsPrimaryKeyMember && IsString(column.DataType))    
    {
        // First 
        lookupProperty = PropertyName(column.Name);
        break;
    }
}

// Associations

string associations = "";
string associationKeys = "";
Dictionary<string, int> associations123 = new Dictionary<string, int>();
foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
    string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
    ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
    string fkPropertyName = PropertyName(fkColumn.Name);
    
    string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
    ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
    string pkPropertyName = PropertyName(pkColumn.Name);
    
    string pkClassName2 = pkClassName == className ? pkClassName + pkClassName : pkClassName;
    //string pkClassName2 = pkClassName == className ? pkClassName + fkPropertyName : pkClassName;
    
    associations += (associations == "" ? " " : ", ") + "\"" + pkClassName2 + "\"";

    string associationKey = "";
    foreach(ColumnSchema column in fkTable.PrimaryKeyMemberColumns)
    {
        associationKey += (associationKey == "" ? "" : ", ") + "\"" + PropertyName(column.Name) + "\"";
    }
    associationKeys += (associationKeys == "" ? " " : ", ") + "new string[] { " + associationKey + " }";
    
    Dictionary123(associations123, pkClassName);
}

// Collections

string collections = "";
string collectionKeys = "";
Dictionary<string, int> collections123 = new Dictionary<string, int>();
foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
    string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);
    collections += (collections == "" ? " " : ", ") + "\"" + Plural(pkClassName, Culture) + "\"";
    
    string collectionKey = "";
    foreach (ColumnSchema column in primaryKey.PrimaryKeyMemberColumns) {
        collectionKey += (collectionKey == "" ? " " : ", ") + "\"" + column.Name + "\"";
    }    
    collectionKeys += (collectionKeys == "" ? " " : ", ") + "new string[] { " + collectionKey + " }";
    
    Dictionary123(collections123, pkClassName);
}

// IsIdentity

string isIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]) ? "true" : "false";

// KeyProperties

string keys = "";
string keyParameters = "";
string keyLinq = "";
string keyCommas = "";
string keyIds = "";
int linq = 0;
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    keys += (keys == "" ? "" : ", ") + "\"" + PropertyName(column.Name) + "\"";
    keyParameters += (keyParameters == "" ? "" : ", ") + GetType(column.DataType, column.AllowDBNull) + " " + ObjectName(column.Name, Culture);
    keyCommas += (keyCommas == "" ? "" : ", ") + PropertyName(column.Name);
    keyLinq += (keyLinq == "" ? "" : " && ") + PropertyName(column.Name) + " == @" + linq.ToString();
    keyIds += (keyIds == "" ? "" : ", ") + "(" + GetType(column.DataType, false) + ")ids[" + linq.ToString() + "]";
    linq++;
}

// OrderByExpression
//   2nd property, or 1st if there is no 2nd property
//   1st string property

string orderByExpression = PropertyName((SourceTable.Columns.Count >= 2) ? SourceTable.Columns[1].Name : SourceTable.Columns[0].Name);
foreach (ColumnSchema column in SourceTable.Columns) {
    // First String non-primary-key column
    if (!column.IsPrimaryKeyMember && IsString(column.DataType))    
    {
        // First 
        orderByExpression = PropertyName(column.Name);
        break;
    }
}

// NHibernate

bool isNHibernate = true;
string pkEquals = ""; // property1 == object.Property1 && ..
string pkHashCode = ""; // Property1.ToString() + "|" + ...
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    pkEquals += (pkEquals == "" ? "" : " && ") + PropertyName(column.Name) + " == " + objectName + "." + PropertyName(column.Name);
    pkHashCode += (pkHashCode == "" ? "" : " + \"|\" + ") + PropertyName(column.Name) + ".ToString()";
}

string comma;
int commaIndex = 0;
int commaParameters = 0;
foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) {
    commaParameters++;
}
foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
    if (!column.AllowDBNull) {   
        commaParameters++;
    }    
}
foreach (ColumnSchema column in SourceTable.NonPrimaryKeyColumns) {
    if (column.AllowDBNull) {   
        commaParameters++;
    }    
}
%>
using EasyLOB.Data;
using EasyLOB.Library;
using System;
using System.Collections.Generic;

namespace <%= Namespace %>
{
    public partial class <%= className %> : ZDataBase
    {        
        #region Properties
<%  Dictionary1(associations123);
    foreach (ColumnSchema column in SourceTable.Columns) {
        bool columnIsPrimaryKey = column.IsPrimaryKeyMember;
        bool columnIsIdentity = IsIdentity(SourceTable.PrimaryKey.MemberColumns[0]);
        bool columnIsNullable = column.AllowDBNull;
        bool isNullable = column.AllowDBNull;
        //string protectedSet = column.IsForeignKeyMember ? "protected " : "";
        string protectedSet = ""; %>

<%      if (!column.IsForeignKeyMember) {
            if (column.IsPrimaryKeyMember) { %>
        [ZKey(<%= isIdentity %>)]
<%          } %>            
        public virtual <%= GetType(column.DataType, isNullable) %> <%= PropertyName(column.Name) %> { get; set; }
<%      } else {
            string fkClassName = "";
            string fkPropertyName = "";
            string pkClassName = "";
            string pkPropertyName = "";
            string pkClassName2 = "";
            foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
                fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
                ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
                fkPropertyName = PropertyName(fkColumn.Name);
                
                pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
                ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
                pkPropertyName = PropertyName(pkColumn.Name);
                
                pkClassName2 = pkClassName == fkClassName ? pkClassName + pkClassName : pkClassName;
                //pkClassName2 = pkClassName == fkClassName ? pkClassName + fkPropertyName : pkClassName;
                
                if (fkColumn.Name == column.Name)
                {
                    break;
                }
            }
            string value = isNullable ? "value ?? LibraryDefaults.Default_" + GetDbType(column.DataType) : "value";
                        
            string x = "";
            if (associations123.ContainsKey(pkClassName)) {
                x = (++associations123[pkClassName]).ToString();
            } %>       
        private <%= GetType(column.DataType, isNullable) %> _<%= ObjectName(column.Name, Culture) %>;

<%          if (column.IsPrimaryKeyMember) { %>
        [ZKey(<%= isIdentity %>)]
<%          } %>
        public virtual <%= GetType(column.DataType, isNullable) %> <%= PropertyName(column.Name) %>
        {
            get { return this.<%= pkClassName2 %><%= x %> == null ? _<%= ObjectName(column.Name, Culture) %> : this.<%= pkClassName2 %><%= x %>.<%= pkPropertyName %>; }
            set
            {
                _<%= ObjectName(column.Name, Culture) %> = value;
                <%= pkClassName2 %><%= x %> = null;
            }
        }
<%      }
    } %>

        #endregion Properties
<%  if (SourceTable.ForeignKeys.Count > 0) { %>

        #region Associations (FK)
<%      Dictionary1(associations123);
        foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);
            
            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);            
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);
            
            string pkClassName2 = pkClassName == fkClassName ? pkClassName + pkClassName : pkClassName;
            //string pkClassName2 = pkClassName == fkClassName ? pkClassName + fkPropertyName : pkClassName;
            
            string x = "";
            if (associations123.ContainsKey(pkClassName)) {
                x = (++associations123[pkClassName]).ToString();
            } %>

        public virtual <%= pkClassName %> <%= pkClassName2 %><%= x %> { get; set; } // <%= fkPropertyName %>
<%      } %>

        #endregion Associations (FK)
<%  }
    if (SourceTable.PrimaryKeys.Count > 0) { %>

        #region Collections (PK)
<%      Dictionary1(collections123);
        foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
            string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);

            string x = "";
            if (collections123.ContainsKey(pkClassName)) {
                x = (++collections123[pkClassName]).ToString();
            } %>

        public virtual IList<<%= pkClassName %>> <%= Plural(pkClassName, Culture) %><%= x %> { get; }
<%      } %>

        #endregion Collections (PK)
<%  } %>

        #region Methods
        
        public <%= className %>()
        {            
<%  if (SourceTable.PrimaryKeys.Count > 0) {
        Dictionary1(collections123);
        foreach (TableKeySchema primaryKey in SourceTable.PrimaryKeys) {
            string pkClassName = ClassName(primaryKey.ForeignKeyTable.Name, Culture);

            string x = "";
            if (collections123.ContainsKey(pkClassName)) {
                x = (++collections123[pkClassName]).ToString();
            } %>
            <%= Plural(pkClassName, Culture) %><%= x %> = new List<<%= pkClassName %>>();
<%      } %>

<%  } %>
            OnConstructor();
        }

        public override object[] GetId()
        {
            return new object[] { <%= keyCommas %> };
        }

        public override void SetId(object[] ids)
        {
<%  int index = 0;
    foreach (ColumnSchema column in SourceTable.PrimaryKey.MemberColumns) { %>
            if (ids != null && ids[<%= index.ToString() %>] != null)
            {
                <%= PropertyName(column.Name) %> = DataHelper.IdTo<%= GetDbType(column.DataType) %>(ids[<%= index.ToString() %>]);
            }
<%      index++;
    } %>            
        }

        #endregion Methods
<%  if (isNHibernate && SourceTable.PrimaryKey.MemberColumns.Count > 1) { %>

        #region Methods NHibernate

        public override bool Equals(Object obj)
        {
            if (obj == null)
            {
                return false;
            }

            if (obj is <%= className %>)
            {
                var <%= objectName %> = (<%= className %>)obj;
                if (<%= objectName %> == null)
                {
                    return false;
                }

                if (<%= pkEquals %>)
                {
                    return true;
                }
            }

            return false;
        }

        public override int GetHashCode()
        {
            return (<%= pkHashCode %>).GetHashCode();
        }

        #endregion Methods NHibernate
<%  } %>
    }
}
